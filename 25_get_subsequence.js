// Total subString formula = ( n * n(n + 1) ) / 2
// This follow an order cant skip in between

// Input : string = abc
// Output : 6
// Explanation: Substrings are: 'a' 'ab' 'abc' 'b' 'bc' 'c'

// ---------------------------------------------  //

// Total sub-sequence formula = 2 ^ n
// Definition:
// A Subsequence of a string is the one which is generated by deleting 0 or more letters
// from the string and keeping the rest of the letters in the same order.

// Input : string = abc   // yes or no for each letter
// Output : 8
// Explanation:  sub-sequence are : '___' '__c' '_b_' '_bc' 'a__' 'a_c' 'ab_' 'abc'
// For total length of string: ( 2^(n-1) . n )

function getss(str) {
  if (str.length === 0) {
    return [""];
  }
  const firstLetter = str.charAt(0);
  const remString = str.substring(1);

  const suppose = getss(remString);

  let ans = [];

  for (let i = 0; i < suppose.length; i++) {
    ans.push(firstLetter + suppose[i]);
    ans.push("_" + suppose[i]);
  }

  return ans;
}
console.log(getss("abc"));
